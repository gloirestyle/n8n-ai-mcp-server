export class N8nApi {\n  private baseUrl: string;\n  private apiKey?: string;\n\n  constructor(config: { baseUrl: string; apiKey?: string }) {\n    this.baseUrl = config.baseUrl;\n    this.apiKey = config.apiKey;\n  }\n\n  async createWorkflow(name: string, nodes: any[]) {\n    const response = await fetch(`${this.baseUrl}/api/v1/workflows`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({\n        name,\n        nodes,\n        active: false\n      })\n    });\n    return await response.json();\n  }\n\n  async executeWorkflow(workflowId: string) {\n    const response = await fetch(`${this.baseUrl}/api/v1/workflows/${workflowId}/activate`, {\n      method: 'POST',\n      headers: this.getHeaders()\n    });\n    return await response.json();\n  }\n\n  async updateWorkflow(workflowId: string, nodes: any[]) {\n    const response = await fetch(`${this.baseUrl}/api/v1/workflows/${workflowId}`, {\n      method: 'PUT',\n      headers: this.getHeaders(),\n      body: JSON.stringify({ nodes })\n    });\n    return await response.json();\n  }\n\n  async deleteWorkflow(workflowId: string) {\n    const response = await fetch(`${this.baseUrl}/api/v1/workflows/${workflowId}`, {\n      method: 'DELETE',\n      headers: this.getHeaders()\n    });\n    return await response.json();\n  }\n\n  async listWorkflows() {\n    const response = await fetch(`${this.baseUrl}/api/v1/workflows`, {\n      headers: this.getHeaders()\n    });\n    return await response.json();\n  }\n\n  private getHeaders() {\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json'\n    };\n    if (this.apiKey) {\n      headers['X-N8N-API-KEY'] = this.apiKey;\n    }\n    return headers;\n  }\n}